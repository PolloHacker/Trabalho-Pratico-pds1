flowchart TB
    subgraph main
    direction TB
        m1{arquivo de entrada informado?} -- true --> m1t[chama a função le_aquivo]
            m1t -- le_arquivo --> m1t1{a string retornada é nula?}
            
        m1 -- false --> m1f[/Pede nome do arquivo para o usuário/]
            m1f --> m1t
            m1t1 -- true --> m1f1t[/Imprime: Erro ao ler arquivo/]
                m1f1t --> m1f1t1([Fim])
            m1t1 -- false --> m1f1f[/Imprime os dados lidos/]
                m1f1f -- cria_jogadores --> m1f1f1[inicia a simulação]
                m1f1f1 -- inicia_jogo --> m1f1f2[libera a memória alocada]
                m1f1f2 --> m1f1f3([encerra o programa])
    end

    subgraph le_arquivo
    direction TB
        l1[recebe um nome de arquivo] --> l2[abre o arquivo em modo de leitura]
        l2 --> l3{arquivo nulo?}
        l3 -- true --> l3t[/Imprime: Erro ao abrir arquivo/] --> l3t1([Fim])
        l3 -- false --> l3f[lê a primeira linha, 
        recebendo o nº de pokemons de cada jogador]
        l3f --> l3f1{contador < num_tot_poks}
        l3f1 -- true --> l3f1t1[lê a próxima linha]
            l3f1t1 --> l3f1t2[armazena os dados do pokemon lido]
            l3f1t2 --> l3f1t3[concatena os dados à string a ser retornada]
            l3f1t3 --> l3f1
        l3f1 -- false --> l3f1f1([retorna a string com todos os dados])
    end

    subgraph cria_jogadores
    direction TB
        c1[recebe os dados do arquivo lido] --> c2[aloca memória para a array de estruturar TJogador]
        c2 --> c3[divide os dados recebidos em linhas usando strtok]
        c3 --> c4{a linha é nula?}
            c4 -- true --> c4t([retorna o array de jogadores])
            c4 -- false --> c4f{é a primeira linha?}
                c4f -- true --> c4ft1[lê a quantidade de pokemons de cada jogador]
                    c4ft1 --> c4ft2[aloca o array de pokemons de cada jogador]
                c4f -- false --> c4ff[divide a linha em palavras]
                c4ff -- divide_linha --> c4ff1[define qual jogador e pokemon está sendo 
                criado com base em contadores]
                c4ff1 --> c4ff2[com o array retornado, povoa um novo pokemon 
                e o coloca no deck do jogador atual]
            c4ft2 --> c4f1[avança nas linhas]
            c4ff2 --> c4f1
            c4f1 --> c4
    end

    subgraph divide_linha
    direction TB
        d1[recebe uma linha] --> d2{a linha é nula?}
        d2 -- true --> d2t[/Imprime: Cadeia de caracteres inválida./]
            d2t --> d2t1([Fim])
        d2 -- false --> d2f[aloca memória para um array de palavras]
            d2f --> d2f1[inicializa ponteiros para o início e fim de cada palavra]
            d2f1 --> d2f2{o ponteiro de início é nulo?}
            d2f2 -- true --> d2f2t[anula a última posição do vetor]
                d2f2t --> d2f2t1([retorna o array de palavras])
            d2f2 -- false --> d2f2f{o ponteiro de início 
            é um espaço em branco?}
                d2f2f -- true --> d2f2ft[avança o ponteiro de início]
                    d2f2ft --> d2f2f
                d2f2f -- false --> d2f2ff[inicializamos o ponteiro de fim
                 como igual ao de início]
                    d2f2ff --> d2f2ff1{o ponteiro de fim é diferente 
                    de um espaço ou '\0' ?}
                    d2f2ff1 -- true --> d2f2ff1t[avança o ponteiro de fim]
                        d2f2ff1t --> d2f2ff1
                    d2f2ff1 -- false --> d2f2ff1f[aloca memória para a palavra encontrada]
                        d2f2ff1f --> d2f2ff1f1[copia a palavra para o vetor 
                         com '\0' na última posição]
                        d2f2ff1f1 --> d2f2ff1f2[avança o ponteiro de início para o endereço do de fim]
                        d2f2ff1f2 --> d2f2ff1f3[avança o contador de palavras]
                        d2f2ff1f3 --> d2f2
    end

    subgraph inicia_jogo
    direction TB
        i1[recebe o array de jogadores] --> i2{o array é nulo?}
        i2 -- true --> t2t[/Imprime: Erro: jogadores é um ponteiro nulo./]
            t2t --> t2t1([Fim])
        i2 -- false --> i2f{há pokemons restantes nos dois times?}
            i2f -- true --> i2ft[chama a função ataca]
                i2ft -- ataca --> i2ft1[troca o lado atacante]
                i2ft1 --> i2f
            i2f -- false --> i2ff[checa quem venceu e os sobreviventes]
            i2ff -- checa_sobreviventes --> i2ff1[checa os derrotados]
            i2ff1 -- checa_derrotados --> i2ff2([chama a função 'pause' e retorna])
    end

    subgraph ataca
    direction TB
        a1[recebe o array de jogadores e
         o índice do atacante] --> a2{o array é nulo ?}
        a2 -- true --> a2t[/Imprime: Erro: jogadores é um ponteiro nulo./]
            a2t --> a2t1([Fim])
        a2 -- false --> a2f[define os pokemons atacante e defensor]
            a2f -- mais_forte, mais_fraco --> a2f1[determina a força do ataque com base nos tipos]
            a2f1 --> a2f2[calcula o hp a ser retirado do defensor]
            a2f2 --> a2f3{o defensor foi derrotado?}
            a2f3 -- true --> a2f3t[avança o contador de pokemon
             atual do jogador defensor]
                a2f3t --> a2f3t1[/Imprime qual pokemon venceu/]
                a2f3t1 --> a2f4([retorna])
            a2f3 -- false --> a2f4
    end

    subgraph checa_sobreviventes
    direction TB
        cs1[recebe o array de jogadores 
        e o índice do vencedor] --> cs2[inicializa um contador como o número
         do pokemon atual do jogador vencedor]
        cs2 --> cs3{o contador é menor do que a
         quantidade de pokemons do vencedor?}
        cs3 -- true --> cs3t[/Imprime o nome do pokemon/]
            cs3t --> cs3
        cs3 -- false --> cs4([retorna])
    end

    subgraph checa_derrotados
    direction TB
        cd1[recebe o array de jogadores] --> cd2[inicializa um contador como o número
         do pokemon atual do jogador 1]
        cd2 --> cd3{o contador é menor do que o 
        número do pokemon atual do jogador 1?}
        cd3 -- true --> cd3t[/Imprime o nome do pokemon/]
            cd3t --> cd3
        cd3 -- false --> cd3f[inicializa o contador como o número
         do pokemon atual do jogador 2]
            cd3f --> cd3f1{o contador é menor do que o 
        número do pokemon atual do jogador 2?}
            cd3f1 -- true --> cd3f1t[/Imprime o nome do pokemon/]
                cd3f1t --> cd3f1
            cd3f1 -- false --> cd3f1f([retorna])
    end